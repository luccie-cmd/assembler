Constant folding for numeric binary expressions (mov rax, 5*10+2 -> mov rax, 52)
Constant propagation for register binary expressions (mov rax, 3; add rax, 5 -> mov rax, 8)
Common subexpression elimination (mov rax, 3; mov rbx, 5; add rax, rbx -> mov rax 8)
Copy propagation (mov rax, rbx; mov rcx, rax -> mov rcx, rbx)
DSE (mov [rbx], 0; mov [rbx], 10 -> mov [rbx], 10)
DCE (removing file locally uncalled blocks)
Branch optimization (jmp label1; label1; jmp label2 -> jmp label2)
Inlining of functions
CF optimization (cmp rax, rax; je label1; jmp label2 -> jmp label1)
Combine identical branches (cmp rax, 5; je label1; mov rbx, 0; jmp end; label1; mov rbx, 0; end; -> cmp rax 5; mov rbx, 0)
Strength reduction (mov rax, 0 -> xor rax, rax. imul rax 4 -> shl rax, 2)
Tail call optimization (call label1; ret -> jmp label1)
DRE (mov rax, 5 and rax is never used again -> remove it)
Loop hoisting

CF -> Control Flow
DCE -> Dead Code Elimination
DRE -> Dead Register Elimination
DSE -> Dead Store Elimination

Do passes until no more are found
We determine if none are found by looping twice and if both return no new optimizations we break